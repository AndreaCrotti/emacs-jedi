============================================
 Jedi.el - Python auto-completion for Emacs
============================================

.. sidebar:: Links:

   * `Documentation <http://tkf.github.com/emacs-jedi/>`_ (at GitHub Pages)

     * `Configuration <http://tkf.github.com/emacs-jedi#configuration>`_
     * `Command <http://tkf.github.com/emacs-jedi#command>`_
     * `Troubleshooting <http://tkf.github.com/emacs-jedi#troubleshooting>`_

   * `Repository <https://github.com/tkf/emacs-jedi>`_ (at GitHub)
   * `Issue tracker <https://github.com/tkf/emacs-jedi/issues>`_ (at GitHub)
   * `Travis CI <https://travis-ci.org/#!/tkf/emacs-jedi>`_ |build-status|


What is it?
===========

Jedi.el is a Python auto-completion package for Emacs.
It aims at helping your Python coding in a non-destructive way.
It also helps you to find information about Python objects, such as
docstring, function arguments and code location.

Jedi.el uses jedi_ (an awesome Python auto-completion library) and
EPC_ (an RPC stack for Emacs Lisp) and its `Python binding`_ to
communicate with Python process.  It also uses excellent Emacs
auto-complete_ module to start completion automatically.  As Jedi.el
always calls Python function asynchronously (thanks to EPC_), it will
not block your Emacs while your are editing.

.. _jedi: https://github.com/davidhalter/jedi
.. _EPC: https://github.com/kiwanami/emacs-epc
.. _Python binding: python-epc_
.. _python-epc: https://github.com/tkf/python-epc
.. _auto-complete: https://github.com/auto-complete/auto-complete


Requirements
============

Emacs
-----
- EPC_
- deferred.el_ (> v0.3)
- auto-complete_

If your completion popup is broken when width of completion candidates
is wide, try the newest version of popup.el_.

.. _deferred.el: https://github.com/kiwanami/emacs-deferred
.. _popup.el: https://github.com/auto-complete/popup-el

Jedi.el is currently tested against Emacs 24.3-devel, 24.2 and 23.1.

Python
------
- Jedi_
- python-epc_
- argparse (for Python 2.6)

Jedi.el is tested against Python 2.6, 2.7 and 3.2.

Optional dependencies for automatic installation:
-------------------------------------------------
- virtualenv
- make


Install
=======

el-get
------

The easiest way to install Jedi.el is to use el-get_:
just do ``M-x el-get-install jedi``.
You need to have `virtualenv` to automatically install Python module
dependencies.  If your el-get does not have the recipes for Jedi.el
yet, get them from `this pull request`_.

.. _el-get: https://github.com/dimitri/el-get
.. _this pull request: https://github.com/dimitri/el-get/pull/927

Manual install
--------------

1. Install EPC_ and auto-complete_.
2. Install Jedi.el.  Download the repository of Jedi.el and add it to
   `load-path`.
3. Install Jedi_ and python-epc_ by

   - ``make requirements`` or
   - ``pip install -r requirements.txt`` if you want to determine
     where to install Python modules.

4. Add ``(autoload 'jedi:setup "jedi" nil t)`` in your Emacs configuration.


Setup
=====

All you need to do is to call `jedi:setup` in python buffer.
To do that, add the following in your Emacs configuration::

   (add-hook 'python-mode-hook 'jedi:setup)

If auto-completion is all you need, use `jedi:ac-setup` instead::

   (add-hook 'python-mode-hook 'jedi:ac-setup)

To setup recommended keybinds for Jedi.el, add this to your Emacs
configuration.  Note that you must set `jedi:setup-keys` *before*
loading `jedi.el`.  See its docstring (``<f1> v jedi:setup-keys``) for
more information.::

   (setq jedi:setup-keys t)


Extension
=========

IPython integration
-------------------

Sometimes it is useful to find completion using Python interpreter.
To do that in a seamless manner, you can use IPython and its Emacs
binding EIN (Emacs IPython Notebook).  See ein:jedi-setup_ in the EIN
manual.  Using this setup, you can run auto-completion command in
Jedi.el and EIN simultaneously.

.. _ein:jedi-setup:
   http://tkf.github.com/emacs-ipython-notebook/#ein:jedi-setup


.. Build status badge
.. |build-status|
   image:: https://secure.travis-ci.org/tkf/emacs-jedi.png?branch=master
   :target: http://travis-ci.org/tkf/emacs-jedi
   :alt: Build Status


.. ^- put some space after README.rst

Configuration
=============

.. el:package:: jedi

.. el:function:: jedi:setup
.. el:function:: jedi:ac-setup
.. el:variable:: jedi:complete-on-dot
.. el:variable:: jedi:server-command
.. el:variable:: jedi:server-args
.. el:variable:: jedi:get-in-function-call-timeout
.. el:variable:: jedi:get-in-function-call-delay
.. el:variable:: jedi:tooltip-method
.. el:variable:: jedi:doc-mode
.. el:variable:: jedi:doc-display-buffer


Keybinds
--------

.. el:variable:: jedi:setup-keys
.. el:variable:: jedi:key-complete
.. el:variable:: jedi:key-goto-definition
.. el:variable:: jedi:key-show-doc
.. el:variable:: jedi:key-related-names


Command
=======

.. el:function:: jedi:stop-server
.. el:function:: jedi:start-dedicated-server
.. el:function:: jedi:complete
.. el:function:: jedi:get-in-function-call
.. el:function:: jedi:goto-definition
.. el:function:: jedi:show-doc

.. el:package:: helm
.. el:function:: helm-jedi-related-names

.. el:package:: anything
.. el:function:: anything-jedi-related-names

.. el:package:: jedi
.. el:function:: jedi:toggle-debug-server


Troubleshooting
===============

Before posting question or bug report in the `issue tracker`_, please
investigate the problem by yourself.  Here is some checklist.

1. To make sure that jedi.el is running correctly, you can
   do ``M-x jedi:show-jedi-version``.  It will show the versions
   of the Python libraries you are using.

2. To check that :el:symbol:`jedi:setup` is called properly via
   :el:symbol:`python-mode-hook`, run ``M-: jedi-mode RET`` in
   some Python file.  It should return `t`.

3. It is possible that Jedi's keybind conflicts with keybinds
   of other libraries.  You can check the definition of keybind
   by ``<f1> k C-c d`` (or ``C-h`` instead of ``<f1>``), for example.
   This one should show the help for :el:symbol:`jedi:show-doc`.

   If you find other command using the keybind, you can
   change it by using :el:symbol:`jedi:key-show-doc`, etc.
   See: :el:symbol:`jedi:setup-keys`.

4. Make sure that ``(require 'jedi)`` is *not* called anywhere
   before the line ``(setq jedi:setup-keys t)``.
   See: :el:symbol:`jedi:setup-keys`.

   To check that keybind setup works, do ``M-: jedi-mode-map RET``.
   It should return something like the following (formatted):

   .. sourcecode:: cl

      (keymap (3 keymap (100 . jedi:show-doc))
              (67108910 . jedi:goto-definition)
              (C-tab . jedi:complete))


Changelog
=========

v0.1.2 (WIP)
------------

- Do not expand common part when completing on inserting dot using
  :el:symbol:`jedi:dot-complete`.
- Strip off newlines from candidate summary.  This prevents
  popup to be disrupted when showing candidates summary
  containing newlines (e.g., ``json.__all__``).

v0.1.1
------

- Add experimental "full-name" support [#fullname]_.
- PR-11_ fixes Makefile for BSD make (thanks, `@goro1080`_!).
- Fix issue-9_: line number sent to the server was shifted when the cursor
  is at the beginning of line.
- Fix issue-10_: get_in_function_call was called in non-python-mode buffer.
- Fix issue-7_: server process was killed unexpectedly.
- Add :el:symbol:`jedi:setup-keys`.  You don't need to manually add
  Jedi commands to :el:symbol:`python-mode-map` now.

.. _@goro1080: https://github.com/goro1080

.. _PR-11: https://github.com/tkf/emacs-jedi/pull/11
.. _issue-10: https://github.com/tkf/emacs-jedi/issues/10
.. _issue-9: https://github.com/tkf/emacs-jedi/issues/9
.. _issue-7: https://github.com/tkf/emacs-jedi/issues/7

.. [#fullname] `jedi:get-full-name-*` functions require developmental
   version of Jedi_.
   See also: `Request: Definition.fullname · Issue #61 ·
   davidhalter/jedi <https://github.com/davidhalter/jedi/issues/61>`_

v0.1
----

- PR-8_ adds ELDoc like argument highlighting (thanks, `@syohex`_!).
- PR-2_ adds meta-data in header comment for ELPA (thanks, `@syohex`_!).
- PR-1_ fixes Makefile for newer pip version (thanks, `@L42y`_!).
- First version.

.. _PR-8: https://github.com/tkf/emacs-jedi/pull/8
.. _PR-2: https://github.com/tkf/emacs-jedi/pull/2
.. _PR-1: https://github.com/tkf/emacs-jedi/pull/1

.. _@syohex: https://github.com/syohex
.. _@L42y: https://github.com/L42y
